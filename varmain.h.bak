 /***************************************************************************************************************************/
#include<STC_NEW_8051.h> 
#include<intrins.h>
#define  INT8U  unsigned char
#define  INT16U  unsigned int

#define   uchar		unsigned  char
#define   uint		unsigned  int
#define   ulong		unsigned  long
#define   FALSE   0
#define	  TRUE  	1
#define	  MAX_RECV_LEN  300
#define   CL_REC_BUF    0 		//清除接收缓存
#define   NO_CL_REC_BUF 1 		//不清除接收缓存

#define  IPMODE 0
#define  PASEE 0

unsigned  char code birthp[]={17,26,30,49,52,66,75};
unsigned  char code bbp[]={19,23,35,42,59,64,73};

unsigned char xdata iccid[26]={'I','C','C','I','D'};
unsigned char xdata iccid2[20];
unsigned char iccid_bak[11]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

uchar xdata origin[7],password[7],SecuValue[7];
	
uint  data   recv_data_count=0;				//串口1接收数据个数
uchar xdata  recv_data[MAX_RECV_LEN] = {0};	//串口1接收缓冲区


sbit LED=P3^4;
sbit POWER=P5^4;
sbit RESET_M26=P2^7;
sbit DTR=P1^3;
sbit RTS=P1^2;

sfr T2H=0xd6;
sfr T2L=0xd7;

//#define  CRC_OK              0x80       //CRC校验通过位标志
// uint checkcrc;
uint DelayTimeCounter1 = 0;
uchar data LoopTimes = 0, CheckSimTimes = 0, CheckGsmTimes = 0, StartTaskTimes = 0,
			 ActivateTaskTimes = 0, InquryIpTimes = 0, ConnectionTimes = 0, SendConnectionTimes = 0, SendDataTimes = 0,
			 ResponseFlag = 0, TimeCount = 0, Second = 0, Minute = 0, RegistWaitTimes = 0, PingStart = 0, PingNormal = 5,
			 LightCount = 0, LightType = 0, QuitTcpTime=0, QuitTcpFlag=0;
uchar data IsSendState=0;					//发送指令标志位
uchar data IsTcpSendFunc=0;				//进入到TCP_SendData标志，并计时QuitTcpTime1分钟，如果到时间仍未退出，则强制QuitTcpFlag=1;

uchar data IsConnected=0;					//当前连接状态的标志，0表示未连接
uchar data IsRecFlag=0;						//是否收到服务器数据的标志，如果一分钟内没有收到，则重启

uchar data BlueGetCnt_old=0;			//用于判断在TcpSendData中串口1是否发送新的数据，避免数据丢失
	
	
bit   bdata  RecFinish = 0, RecWaitFlag = 0, PingFlag = 0, mjdataflag = 0;
bit   bdata  RecFinish2 = 0, RecWaitFlag2 = 0;
uint  data   RecWaitCounter = 0,RecWaitCounter2 = 0;



////////////
//-----------------------Table of CRC values for high-order byte-----CRC校验用查表-------------------

//uchar code auchCRCHi[]={
//0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
//0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
//0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
//0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
//0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
//0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
//0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
//0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
//0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
//0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
//0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
//0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
//0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
//0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
//0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
//0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
//0x40
//} ;

////-------------------- Table of CRC values for low-order byt-----------------------------------
//uchar code auchCRCLo[]={
//0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
//0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
//0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
//0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
//0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
//0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
//0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
//0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
//0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
//0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
//0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
//0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
//0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
//0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
//0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
//0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
//0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
//0x40
//} ;

//*****************************************************************************************
//new


INT16U idata  BlueSendCnt=0,BlueGetCnt=0;

char count=0;			//用于for循环

//INT8U idata TxBuf[4]={0xe1,0xf2,1,2};  // 8字节, 如果需要更长的数据包,请正确设置
INT8U xdata RxBuf[50]={0xfe,1,2,0xfe};
INT8U xdata RxBuf2[50]={0xfe,1,2,0xfe};
INT8U xdata temp[50]={0xfe};									//用于调整串口1接收的数据RxBuf
bit bdata MobilRECOK=0;
 
uchar code ping[] = {0x31,0x32,0x33,0x34};
			
